{
  "id": "animixplay",
  "name": "Animixplay",
  "version": "1.0.0",
  "manifestURI": "https://raw.githubusercontent.com/Babyretro/SeanimeX/main/src/Animixplay/manifest.json",
  "language": "typescript",
  "type": "onlinestream-provider",
  "description": "Animixplay is an online streaming provider using animixplay.fun API for subbed and dubbed anime",
  "author": "YourName",
  "icon": "",
  "website": "https://animixplay.fun",
  "lang": "en",
  "payload": "/// <reference path=\"./online-streaming-provider.d.ts\" />\n\nclass Provider {\n  private baseUrl = \"https://animixplay.fun\";\n\n  getSettings(): Settings {\n    return {\n      episodeServers: [\"Animixplay\"],\n      supportsDub: true,\n    };\n  }\n\n  async search(query: SearchOptions): Promise<SearchResult[]> {\n    const q = encodeURIComponent(query.query);\n    const res = await fetch(`${this.baseUrl}/api/lsearch?q=${q}`, {\n      headers: {\n        \"User-Agent\": \"Mozilla/5.0\",\n        \"Accept\": \"application/json\",\n        \"Referer\": this.baseUrl + \"/\",\n        \"Origin\": this.baseUrl\n      }\n    });\n\n    if (!res.ok) throw new Error(`Search failed: ${res.statusText}`);\n\n    const data = await res.json();\n\n    return data.map((item: any) => ({\n      id: item.animeId.toString(),\n      title: item.animeTitle,\n      url: `${this.baseUrl}/watch/${item.animeId}`,\n      subOrDub: \"both\"\n    }));\n  }\n\n  async findEpisodes(id: string): Promise<Episode[]> {\n    const res = await fetch(`${this.baseUrl}/api/episode/list?animeId=${id}`, {\n      headers: {\n        \"User-Agent\": \"Mozilla/5.0\",\n        \"Accept\": \"application/json\",\n        \"Referer\": this.baseUrl + \"/\",\n        \"Origin\": this.baseUrl\n      }\n    });\n\n    if (!res.ok) throw new Error(`Fetch episodes failed: ${res.statusText}`);\n\n    const data = await res.json();\n\n    if (!data || !data.episodes) throw new Error(\"No episodes found\");\n\n    return data.episodes.map((ep: any) => ({\n      id: ep.episodeId.toString(),\n      number: ep.number,\n      title: ep.title || `Episode ${ep.number}`,\n      url: `${this.baseUrl}/watch/${id}/${ep.episodeId}`\n    }));\n  }\n\n  async findEpisodeServer(episode: EpisodeDetails, _server: string): Promise<EpisodeServer> {\n    const res = await fetch(`${this.baseUrl}/api/watch/${episode.id}`, {\n      headers: {\n        \"User-Agent\": \"Mozilla/5.0\",\n        \"Accept\": \"application/json\",\n        \"Referer\": this.baseUrl + \"/\",\n        \"Origin\": this.baseUrl\n      }\n    });\n\n    if (!res.ok) throw new Error(`Fetch stream failed: ${res.statusText}`);\n\n    const data = await res.json();\n\n    if (!data.sources || data.sources.length === 0) throw new Error(\"No video sources found\");\n\n    const videoSources: VideoSource[] = data.sources.map((src: any) => ({\n      url: src.file,\n      quality: src.quality || \"auto\",\n      type: src.type || \"mp4\",\n      subtitles: []\n    }));\n\n    return {\n      server: \"Animixplay\",\n      headers: {\n        Referer: this.baseUrl + \"/\",\n        \"User-Agent\": \"Mozilla/5.0\"\n      },\n      videoSources\n    };\n  }\n}\n"
}
